@using BoardGames.UI.Pages

@code {
    [Parameter]
    public PlayPage.Model Model { get; set; } = null!;
    [Parameter]
    public IGameEngine GameEngine { get; set; } = null!;
    [Inject]
    protected Session Session { get; set; } = null!;
    [Inject]
    protected CommandRunner CommandRunner { get; set; } = null!;

    // Helper properties
    protected Game Game { get; set; } = null!;
    protected ImmutableDictionary<long, AppUser> Users { get; set; } = ImmutableDictionary<long, AppUser>.Empty;
    protected ImmutableList<AppUser> OrderedUsers { get; set; } = ImmutableList<AppUser>.Empty;
    protected AppUser Me { get; set; } = AppUser.None;
    protected bool IsOwner => Me.Id == Game.UserId;
    protected bool IsParticipant => !IsOwner && Users.ContainsKey(Me.Id);
    protected int MyPlayerIndex => OrderedUsers.IndexOf(Me);

    protected override Task OnParametersSetAsync()
    {
        CommandRunner.Component = this;
        Game = Model.Game;
        Users = Model.Users;
        OrderedUsers = Game.Players.Select(p => Users[p.UserId]).ToImmutableList();
        Me = Model.Me;
        return Task.CompletedTask;
    }
}
