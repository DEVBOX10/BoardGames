@using System.Threading
@using System.Collections.Immutable
@using System.Security
@inherits LiveComponentBase<OwnGameList.Model, int?>
@inject IGameService Games
@inject IAppUserService AppUsers
@inject ImmutableDictionary<string, IGameEngine> GameEngines;
@inject Session Session
@inject NavigationManager Navigator

@{
    var state = State.LastValue;
    var error = State.Error;
}

<div class="@CssClass">
    <WhenUpdateError Exception="@error" />
    @if (state.Games.Count > 0) {
        <Heading Size="HeadingSize.Is4">@Title</Heading>
        <Table Narrow="true" Striped="true" Hoverable="true">
            <TableHeader>
                <TableHeaderCell Style="width: 1%"></TableHeaderCell>
                @if (GameEngineId != null) {
                    <TableHeaderCell Style="width: 20%">Game type</TableHeaderCell>
                }
                <TableHeaderCell Style="width: 20%">Creator and players</TableHeaderCell>
                <TableHeaderCell Style="width: auto">State</TableHeaderCell>
                <TableHeaderCell Style="width: 1%">Chat</TableHeaderCell>
                <TableHeaderCell Style="width: 20%">Last action</TableHeaderCell>
            </TableHeader>
            <TableBody>
                @foreach(var game in state.Games) {
                    var gameUrl = LinkBuilder.Game(game.EngineId, game.Id);
                    var message = string.IsNullOrEmpty(game.StateMessage) ? game.Intro : game.StateMessage;
                    <TableRow @key="@game.Id" Clicked="_ => Navigator.NavigateTo(gameUrl)">
                        <TableRowCell>
                            <Button Size="Size.Small" Color="Color.Primary" Type="@ButtonType.Link" To="@gameUrl">
                                <Blazorise.Icon Name="@FontAwesomeIcons.Gamepad" />
                            </Button>
                        </TableRowCell>
                        @if (GameEngineId != null) {
                            <TableHeaderCell>
                                <a href="@LinkBuilder.Game(game.EngineId)">@GameEngines[game.EngineId].Title</a>
                            </TableHeaderCell>
                        }
                        <TableRowCell>
                            <AppUsersBadge Users="@game.Players.Select(p => state.GetUser(p.UserId))"/>
                        </TableRowCell>
                        <TableRowCell>
                            <Badge Color="@GetStageColor(game.Stage)">@game.Stage</Badge>
                            @if (!string.IsNullOrEmpty(message)) {
                                <span> &ndash; </span>
                                <GameMessageSpan Text="@message" />
                            }
                        </TableRowCell>
                        <TableRowCell>
                            <ChatMessageCountBadge ChatId="@Chat.GetGameChatId(game.Id)" />
                        </TableRowCell>
                        <TableRowCell>
                            @if (game.LastMoveAt.HasValue) {
                                <MomentsAgoBadge Value="@game.LastMoveAt.GetValueOrDefault()"/>
                            } else if (game.StartedAt.HasValue) {
                                <MomentsAgoBadge Value="@game.StartedAt.GetValueOrDefault()"/>
                            } else {
                                <MomentsAgoBadge Value="@game.CreatedAt"/>
                            }
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
    }
</div>

@code {
    public record Model {
        public ImmutableList<Game> Games { get; init; } = ImmutableList<Game>.Empty;
        public ImmutableDictionary<long, AppUser> Users { get; init; } = ImmutableDictionary<long, AppUser>.Empty;

        public AppUser GetUser(long userId) => Users.GetValueOrDefault(userId) ?? AppUser.None;
    }

    [Parameter]
    public string CssClass { get; set; } = "";
    [Parameter]
    public string Title { get; set; } = "";
    [Parameter]
    public string? GameEngineId { get; set; }
    [Parameter]
    public GameStage? GameStage { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Title)) {
            Title = $"Your {(GameStage.HasValue ? GetStageName(GameStage.Value) : "")} games";
            if (GameEngineId != null) {
                var gameEngine = GameEngines[GameEngineId];
                Title += $"of {gameEngine.Title}";
            }
        }
        return Task.CompletedTask;
    }

    protected Color GetStageColor(GameStage stage)
        => stage switch {
            Abstractions.GameStage.New => Color.Light,
            Abstractions.GameStage.Playing => Color.Primary,
            Abstractions.GameStage.Ended => Color.Dark,
            _ => throw new ArgumentOutOfRangeException(nameof(stage))
            };

    protected string GetStageName(GameStage stage)
        => stage switch {
            Abstractions.GameStage.New => "new",
            Abstractions.GameStage.Playing => "ongoing",
            Abstractions.GameStage.Ended => "finished",
            _ => throw new ArgumentOutOfRangeException(nameof(stage))
            };

    protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var count = Locals.Value ?? 100;
        try {
            var games = await Games.ListOwnAsync(GameEngineId, GameStage, count, Session, cancellationToken);
            var userIds = games.SelectMany(g => g.Players.Select(p => p.UserId)).ToHashSet();
            var users = await userIds.ParallelSelectToListAsync((id, ct) => AppUsers.FindAsync(id, ct), cancellationToken);
            return new Model() {
                Games = games,
                Users = users.Where(u => u != null).ToImmutableDictionary(u => u!.Id)!,
            };
        }
        catch (SecurityException) {
            return new Model();
        }
    }
}
