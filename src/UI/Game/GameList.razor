@using System.Threading
@using System.Collections.Immutable
@inherits LiveComponentBase<GameList.Model, int?>
@inject IGameService Games
@inject IAppUserService AppUsers
@inject ImmutableDictionary<string, IGameEngine> GameEngines;
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager Navigator

@{
    var state = State.LastValue;
    var error = State.Error;
}

<div class="@CssClass">
    <Heading Size="HeadingSize.Is4">@Title</Heading>
    <WhenUpdateError Exception="@error" />
    @if (state.Games.Count > 0) {
        <Table Narrow="true" Striped="true" Hoverable="true">
            <TableHeader>
                <TableHeaderCell Style="width: 1%"></TableHeaderCell>
                <TableHeaderCell Style="width: auto">Creator and players</TableHeaderCell>
                <TableHeaderCell Style="width: auto">Intro</TableHeaderCell>
                <TableHeaderCell Style="width: 1%">Chat</TableHeaderCell>
                <TableHeaderCell Style="width: 20%">Created</TableHeaderCell>
            </TableHeader>
            <TableBody>
                @foreach(var game in state.Games) {
                    var gameUrl = LinkBuilder.Game(game.EngineId, game.Id);
                    <TableRow @key="@game.Id" Clicked="_ => Navigator.NavigateTo(gameUrl)">
                        <TableRowCell>
                            <Button Size="Size.Small" Color="Color.Primary" Type="@ButtonType.Link" To="@gameUrl">
                                <Blazorise.Icon Name="@FontAwesomeIcons.Gamepad" />
                            </Button>
                        </TableRowCell>
                        <TableRowCell>
                            <AppUsersBadge Users="@game.Players.Select(p => state.GetUser(p.UserId))"/>
                        </TableRowCell>
                        <TableRowCell>
                            <GameMessageSpan Text="@game.Intro" />
                        </TableRowCell>
                        <TableRowCell>
                            <ChatMessageCountBadge ChatId="@Chat.GetGameChatId(game.Id)" />
                        </TableRowCell>
                        <TableRowCell>
                            <MomentsAgoBadge Value="@game.CreatedAt"/>
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
    } else {
        <Badge Color="Color.Secondary">No games found.</Badge>
    }
</div>

@code {
    public record Model {
        public ImmutableList<Game> Games { get; init; } = ImmutableList<Game>.Empty;
        public ImmutableDictionary<long, AppUser> Users { get; init; } = ImmutableDictionary<long, AppUser>.Empty;

        public AppUser GetUser(long userId) => Users.GetValueOrDefault(userId) ?? AppUser.None;
    }

    [Parameter]
    public string CssClass { get; set; } = "";
    [Parameter]
    public string Title { get; set; } = "Open games you can join";
    [Parameter]
    public string GameEngineId { get; set; } = "";
    [Parameter]
    public GameStage? GameStage { get; set; }
    [Parameter]
    public bool ExcludeOwnGames { get; set; } = true;

    protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var count = Locals.Value ?? 100;
        var games = await Games.ListAsync(GameEngineId, GameStage, count, cancellationToken);
        var userIds = games
            .SelectMany(g => g.Players.Select(p => p.UserId))
            .Concat(games.Select(g => g.UserId))
            .ToHashSet();
        var users = await userIds.ParallelSelectToListAsync((id, ct) => AppUsers.FindAsync(id, ct), cancellationToken);
        if (ExcludeOwnGames) {
            var authState = await AuthStateProvider.State.UseAsync(cancellationToken);
            if (authState.User.IsAuthenticated) {
                var myUserId = long.Parse(authState.User.Id);
                games = games.Where(g => g.UserId != myUserId).ToImmutableList();
            }
        }
        return new Model() {
            Games = games,
            Users = users.Where(u => u != null).ToImmutableDictionary(u => u!.Id)!,
        };
    }
}
