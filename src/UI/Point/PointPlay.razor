@attribute [MatchFor(typeof(PointEngine), ComponentScopes.GamePlay)]
@using Color = System.Drawing.Color
@using System.Text.Encodings.Web
@using Stl.Text
@inherits GamePlayBase

@{
    var gameEngine = (PointEngine) GameEngine;
    var gameState = gameEngine.DeserializeState(Game.StateJson);
    var playersCards = gameState.PlayersCards;
    var playerStatuses = gameState.Statuses;
    var myCards = playersCards[MyPlayerIndex];
}

<WhenCommandError Exception="CommandRunner.Error"/>

@if (Game.Stage != GameStage.Ended) {
    <Paragraph>
        <GameMessage Message="@Game.StateMessage" Players="Game.Players" Users="Users"/>
        <hr>

        <Button Color="Blazorise.Color.Success"
                Style="align-content: center; border-radius: 3px;"
                disabled="@(gameState.PlayerIndex != MyPlayerIndex
                            || playerStatuses[MyPlayerIndex] == Status.Finished)"
                @onclick="_ => GetCardAsync()">
            Get Card
        </Button>
        <Button Color="Blazorise.Color.Primary"
                Style="align-content: center; border: 1px solid darkblue;"
                disabled="@(gameState.PlayerIndex != MyPlayerIndex
                            || playerStatuses[MyPlayerIndex] == Status.Finished)"
                @onclick="_ => ChangePlayerStatusAsync()">
            Enough
        </Button>
        @* $1$ <Button Color="Color.Light" Style="align-content: center; border: 1px solid darkblue; min-width: 50px;" disabled>@(gameState.PlayerSteps[MyPlayerIndex])</Button> #1# *@
        @* <button type="button" class="btn btn-custom" style="background: @CellBackground[MyPlayerIndex]" disabled>My color</button> *@
        @* <button type="button" class="btn btn-forward" disabled>+3</button> *@
        @* <button type="button" class="btn btn-backward" disabled>-3</button> *@

    </Paragraph>
}

<Row><Column ColumnSize="ColumnSize.Is6">
        <table>
            <tbody>
            <tr>
                @foreach (var card in myCards)
                {
                    <td @key=@card.Id class="p-0 m-0">
                        <div align="center"
                             style="width: 60pt; height: 90pt; margin: 5pt;;
                             border: 1px solid black; border-radius: 5pt;">
                            <div style="margin-top: 20%;">
                                <p style="vertical-align: center;">@card.Suit</p>
                            </div>
                            <div>
                                <p style="vertical-align: center;">@card.Rank</p>
                            </div>
                        </div>
                    </td>
                }
            </tr>
            </tbody></table>
    </Column>
</Row>

@code {
    private Task GetCardAsync()
    {
        var move = new PointMove(false);
        var command = new Game.MoveCommand(Session, Game.Id, move);
        return CommandRunner.CallAsync(command);
    }

    private Task ChangePlayerStatusAsync()
    {
        var skip = new PointMove(true);
        var command = new Game.MoveCommand(Session, Game.Id, skip);
        return CommandRunner.CallAsync(command);
    }
}

<style>
    .btn-custom {
        color: white;
        margin-left: 40px;
    }
    .btn-custom:hover{
        color: white;
        opacity: 1;
    }
    .btn-custom:disabled{
        color: white;
        opacity: 1;
    }
    .btn-forward {
        background: #52D017;
        color: white;
        opacity: 1;
        min-width: 50px;
    }
    .btn-forward:hover{
        background: #52D017;
        color: white;
        opacity: 1;
    }
    .btn-forward:disabled{
        opacity: 1;
    }
    .btn-backward {
        background: #DC381F;
        color: white;
        opacity: 1;
        min-width: 50px;
    }
    .btn-backward:hover{
        background: #DC381F;
        color: white;
        opacity: 1;
    }
    .btn-backward:disabled{
        opacity: 1;
    }
</style>
