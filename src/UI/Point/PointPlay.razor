@attribute [MatchFor(typeof(PointEngine), ComponentScopes.GamePlay)]
@inherits GamePlayBase

@{
    var gameEngine = (PointEngine) GameEngine;
    var gameState = gameEngine.DeserializeState(Game.StateJson);
    var playersCards = gameState.PlayersCards;
    var playerStatuses = gameState.Statuses;
    var myCards = playersCards[MyPlayerIndex];
    var scores = gameState.Scores;
}

<WhenCommandError Exception="CommandRunner.Error"/>

@if (Game.Stage != GameStage.Ended) {
    <Paragraph>
        <GameMessage Message="@Game.StateMessage" Players="Game.Players" Users="Users"/>
        <hr>

        <Button Color="Blazorise.Color.Success"
                Style="align-content: center; border-radius: 3px;"
                disabled="@(gameState.PlayerIndex != MyPlayerIndex
                            || playerStatuses[MyPlayerIndex] == Status.Finished)"
                @onclick="_ => GetCardAsync()">
            Get Card
        </Button>
        <Button Color="Blazorise.Color.Primary"
                Style="align-content: center; border-radius: 3px;"
                disabled="@(gameState.PlayerIndex != MyPlayerIndex
                            || playerStatuses[MyPlayerIndex] == Status.Finished)"
                @onclick="_ => ChangePlayerStatusAsync()">
            Enough
        </Button>
        <Buttons>
            <Button Color="Blazorise.Color.Info" disabled
                    style="border-bottom-left-radius: 3px; border-top-left-radius: 3px;">
                Total:
            </Button>
            <Button Color="Blazorise.Color.Info" disabled
                    style="border-bottom-right-radius: 3px; border-top-right-radius: 3px;">
                @scores[MyPlayerIndex]
            </Button>
        </Buttons>

    </Paragraph>
}

<Row><Column ColumnSize="ColumnSize.Is6">
    <table><tbody><tr>
        @foreach (var card in myCards) {
            <td @key=@card.Id class="p-0 m-0">
                <div align="center"
                     style="width: 60pt; height: 90pt; margin: 5pt;;
                     border: 1px solid black; border-radius: 5pt;">
                    <div style="margin-top: 20%;">
                        <p style="vertical-align: center;">@GetCardSuit(card.Suit)</p>
                    </div>
                    <div>
                        <p style="vertical-align: center;">@card.Rank</p>
                    </div>
                </div>
            </td>
        }
        </tr></tbody></table>
    </Column>
</Row>

@code {
    private Task GetCardAsync()
    {
        var move = new PointMove(false);
        var command = new Game.MoveCommand(Session, Game.Id, move);
        return CommandRunner.Call(command);
    }

    private Task ChangePlayerStatusAsync()
    {
        var skip = new PointMove(true);
        var command = new Game.MoveCommand(Session, Game.Id, skip);
        return CommandRunner.Call(command);
    }

    private MarkupString GetCardSuit(CardSuit suit)
    {
        Dictionary<CardSuit, string> _suits = new Dictionary<CardSuit, string>();
        _suits.Add(CardSuit.Spades, "&spades;");
        _suits.Add(CardSuit.Clubs, "&clubs;");
        _suits.Add(CardSuit.Hearts, "&hearts;");
        _suits.Add(CardSuit.Diamonds, "&diams;");;
        return (MarkupString)_suits[suit];
    }
}