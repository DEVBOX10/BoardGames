@attribute [MatchFor(typeof(GomokuEngine), ComponentScopes.GamePlay)]
@inherits GamePlayBase

@{
    var gameEngine = (GomokuEngine) GameEngine;
    var gameState = gameEngine.DeserializeState(Game.StateJson);
    var board = gameState.Board;
}

<WhenCommandError Exception="CommandRunner.Error"/>

<Row><Column ColumnSize="ColumnSize.Is6">
    <table><tbody>
        @for (var r = 0; r < GomokuEngine.BoardSize; r++) {
            var row = r;
            <tr @key=@row class="p-0 m-0">
                @for (var c = 0; c < GomokuEngine.BoardSize; c++) {
                    var col = c;
                    var cell = board[row, col];
                    <td @key=@((row, col)) class="p-0 m-0">
                        <Button Color="Color.Light" style="padding: 0px; margin: 2px; min-width: 26px; min-height: 26px;"
                                @onclick="_ => MoveAsync(row, col)">
                            @GetIcon(cell)
                        </Button>
                    </td>
                }
            </tr>
        }
    </tbody></table>
</Column></Row>

@code {
    private Task MoveAsync(int r, int c)
    {
        var move = new GomokuMove(r, c);
        var command = new Game.MoveCommand(Session, Game.Id, move);
        return CommandRunner.CallAsync(command);
    }

    private RenderFragment GetIcon(char cell)
        => cell switch {
            'O' => @<Blazorise.Icon Name="FontAwesomeIcons.Circle" IconStyle="IconStyle.Regular" />,
            'X' => @<Blazorise.Icon Name="FontAwesomeIcons.Circle" IconStyle="IconStyle.Solid" />,
            _ => @<span></span>,
            };
}
