@page "/game/{GameEngineId}/{GameId}"
@inherits LiveComponentBase<PlayPage.Model>
@inject IGameService Games
@inject IAppUserService AppUsers
@inject ImmutableDictionary<string, IGameEngine> GameEngines;
@inject IAuthService AuthService
@inject Session Session
@inject NavigationManager Navigator

@{
    var state = State.LastValue;
    var error = State.Error;
}

<h1>@GameEngine.Title</h1>

<WhenUpdateError Exception="@error" />

<AuthorizeView><Authorized>
        <div class="container"><div class="row">
        @if (state.Me.Id != 0) { // Loaded
            <div class="col-md-8">
                @switch (State.Value.Game.Stage) {
                case GameStage.New:
                    <Row Margin="Margin.Is3.OnY">
                        <Column ColumnSize="ColumnSize.Is6">
                            <CopyUrlField Url="@Navigator.Uri"><b>Game URL:</b></CopyUrlField>
                        </Column>
                    </Row>

                    <GameLobbyView Model="@state" GameEngine="@GameEngine" />
                    break;
                case GameStage.Playing:
                case GameStage.Ended:
                    <GamePlayView Model="@state" GameEngine="@GameEngine" />
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
                }
            </div>
            <div class="col-md-4">
                <Card>
                    <CardHeader>Chat</CardHeader>
                    <CardBody>
                        <ChatView ChatId="@Chat.GetGameChatId(state.Game.Id)"/>
                    </CardBody>
                </Card>
            </div>
        }
    </div></div>
</Authorized>
<NotAuthorized>
    <SignInDropdown Why="to join the game"/>
</NotAuthorized></AuthorizeView>

@code {
    public record Model
    {
        public Game Game { get; init; } = new();
        public ImmutableDictionary<long, AppUser> Users { get; init; } = ImmutableDictionary<long, AppUser>.Empty;
        public AppUser Me { get; init; } = AppUser.None;
    }

    [Parameter]
    public string GameEngineId { get; set; } = "";
    [Parameter]
    public string GameId { get; set; } = "";
    private IGameEngine GameEngine => GameEngines[GameEngineId];

    protected override void ConfigureState(LiveState<Model>.Options options)
        => options.WithInstantUpdates();

    protected override async Task<Model> ComputeStateAsync(CancellationToken cancellationToken)
    {
        var game = await Games.FindAsync(GameId, cancellationToken);
        if (game == null || game.EngineId != GameEngineId)
            throw new KeyNotFoundException("Specified game doesn't exist.");
        var users = await game.Players.ParallelSelectToListAsync((p, ct) => AppUsers.FindAsync(p.UserId, ct), cancellationToken);
        var user = await AuthService.GetUserAsync(Session, cancellationToken);
        var appUser = user.IsAuthenticated ? new AppUser(long.Parse(user.Id), user.Name) : AppUser.None;
        return new Model() {
            Game = game,
            Users = users.Where(u => u != null).ToImmutableDictionary(u => u!.Id)!,
            Me = appUser,
        };
    }
}
