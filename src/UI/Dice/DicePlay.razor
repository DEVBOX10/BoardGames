@attribute [MatchFor(typeof(DiceEngine), ComponentScopes.GamePlay)]
@using Stl.Time
@inherits GamePlayBase

@{
    var gameEngine = (DiceEngine) GameEngine;
    var gameState = gameEngine.DeserializeState(Game.StateJson);
    var board = gameState.Board;
}

<WhenCommandError Exception="CommandRunner.Error"/>

@if (Game.Stage != GameStage.Ended) {
    <Paragraph>
        <GameMessage Message="@Game.StateMessage" Players="Game.Players" Users="Users"/>
        <hr>

        <Button Color="@GetDiceColor(gameState.PlayerIndex)"
                Style="align-content: center; border-radius: 3px;"
                disabled="@(gameState.PlayerIndex != MyPlayerIndex)"
                @onclick="_ => MoveAsync()">
            Drop Dice
        </Button>
        <Button Color="Color.Primary" Style="align-content: center; border: 1px solid darkblue;" disabled>@diceValue</Button>
        <Button Color="Color.Light" Style="align-content: center; border: 1px solid darkblue; min-width: 50px;" disabled>@(gameState.Steps[MyPlayerIndex])</Button>
        <button type="button" class="btn btn-custom" disabled>My color</button>
        <button type="button" class="btn btn-forward" disabled>+3</button>
        <button type="button" class="btn btn-backward" disabled>-3</button>

    </Paragraph>
}

<Row><Column ColumnSize="ColumnSize.Is6">
        <table>
            <tbody>
            @for (var r = 0; r < DiceEngine.BoardSize; r++)
            {
                var row = r;
                <tr @key=@row>
                    @if (r % 2 == 0)
                    {
                        @for (var c = 0; c < DiceEngine.BoardSize; c++)
                        {
                            var col = c;
                            var cell = board[row, col];
                            <td @key=@((row, col))>
                                <table style="margin: 1px; min-width: 50px; min-height: 50px; background: @cell.Background;">
                                    <tbody>
                                    <tr>
                                        @for (int i = 0; i < 2; i++)
                                        {
                                            <td align="center">
                                                <div align="center">
                                                    <i class="fas fa-circle" style="opacity: @cell.Opacities[i]; color: @cell.Colors[i];"></i>
                                                </div>
                                            </td>
                                        }
                                    </tr>
                                    <tr>
                                        @for (int i = 2; i < 4; i++)
                                        {
                                            <td align="center">
                                                <div align="center">
                                                    <i class="fas fa-circle" style="opacity: @cell.Opacities[i]; color: @cell.Colors[i];"></i>
                                                </div>
                                            </td>
                                        }
                                    </tr>
                                    </tbody>
                                </table>
                            </td>
                        }
                    }
                    else
                    {
                        @for (var c = DiceEngine.BoardSize - 1; c >= 0; c--)
                        {
                            var col = c;
                            var cell = board[row, col];
                            <td @key=@((row, col))>
                                <table style="margin: 1px; min-width: 50px; min-height: 50px; background: @cell.Background;">
                                    <tbody>
                                    <tr>
                                        @for (int i = 0; i < 2; i++)
                                        {
                                            <td align="center">
                                                <div align="center">
                                                    <i class="fas fa-circle" style="opacity: @cell.Opacities[i]; color: @cell.Colors[i];"></i>
                                                </div>
                                            </td>
                                        }
                                    </tr>
                                    <tr>
                                        @for (int i = 2; i < 4; i++)
                                        {
                                            <td align="center">
                                                <div align="center">
                                                    <i class="fas fa-circle" style="opacity: @cell.Opacities[i]; color: @cell.Colors[i];"></i>
                                                </div>
                                            </td>
                                        }
                                    </tr>
                                    </tbody>
                                </table>
                            </td>
                        }
                    }
                </tr>
            }
            </tbody></table>
    </Column>
</Row>

@code {
    private int diceValue;
    private string ButtonBackground;

    private Task MoveAsync()
    {
        diceValue = GetRandomDigit();
        var move = new DiceMove(MyPlayerIndex, diceValue);
        var command = new Game.MoveCommand(Session, Game.Id, move);
        return CommandRunner.CallAsync(command);
    }

    private Color GetDiceColor(int playerIndex)
        => playerIndex == MyPlayerIndex ? Color.Success : Color.Danger;

    private int GetRandomDigit()
    {
        var rnd = new Random();
        return rnd.Next(1, 7);
    }

    private string GetButtonColor(int playerIndex)
    {
        var colors = new Dictionary<int, string>();
        int i = 0;
        foreach (DiceBoard.Colors color in Enum.GetValues(typeof(DiceBoard.Colors)))
        {
            colors.Add(i, color.ToString().ToLower());
            i++;
        }
        return colors[playerIndex];
    }
}

<style>
    .btn-custom {
        background: @GetButtonColor(MyPlayerIndex)
        color: white;
        margin-left: 40px;
    }
    .btn-custom:hover{
        background: @GetButtonColor(MyPlayerIndex);
        color: white;
        opacity: 1;
    }
    .btn-custom:disabled{
        background: @GetButtonColor(MyPlayerIndex);
        color: white;
        opacity: 1;
    }
    .btn-forward {
        background: #52D017;
        color: white;
        opacity: 1;
        min-width: 50px;
    }
    .btn-forward:hover{
        background: #52D017;
        color: white;
        opacity: 1;
    }
    .btn-forward:disabled{
        opacity: 1;
    }
    .btn-backward {
        background: #DC381F;
        color: white;
        opacity: 1;
        min-width: 50px;
    }
    .btn-backward:hover{
        background: #DC381F;
        color: white;
        opacity: 1;
    }
    .btn-backward:disabled{
        opacity: 1;
    }
</style>
